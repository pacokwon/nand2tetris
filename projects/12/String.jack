// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array memory;
    field int currentLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let maxLength = Math.max(maxLength, 1);
        let memory = Memory.alloc(maxLength);
        let currentLength = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(memory);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return memory[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let memory[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let memory[currentLength] = c;
        let currentLength = currentLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let currentLength = Math.max(currentLength - 1, 0);
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, value;
        var char currentChar;
        var boolean negate;

        let negate = false;
        // is first character '-' ?
        if ((currentLength > 0) & memory[0] = 45) {
            let negate = true;
            let i = 1;
        }

        let value = 0;
        while (i < currentLength) {
            let currentChar = memory[i];
            if ((currentChar < 48) | (currentChar > 57)) {
                return value;
            }

            let value = value * 10 + (currentChar - 48);
            let i = i + 1;
        }

        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let currentLength = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }

        do intToString(val);
        return;
    }

    method void intToString(int val) {
        var int quotient, rem;

        let quotient = val / 10;
        let rem = val - (quotient * 10);

        if (val < 10) {
            do appendChar(rem + 48);
        } else {
            do intToString(quotient);
            do appendChar(rem + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
